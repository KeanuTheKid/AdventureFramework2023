@inherits SlideBase
@inject IJSRuntime JSRuntime


@using Framework.Slides.JsonClasses

@namespace Framework.Slides



@* Audio player for the background_track of the slide
	source maybe like this:
	<source src=/audio/ambient-piano-loop-85bpm_cut.mp3>*@
<audio id="backgroundmusic_player">
    <source id="bTrackSRC" src="/audio/ambient-piano-loop-85bpm.wav" />
	Du kannst das Audio-Element nicht verwenden, weil dein Browser das nicht unterst√ºtzt.
</audio>

<img id="bg-img" src="@SlideData.Image" alt="ry namako rehetra">
<svg id="svg" viewBox="0,0, 1920,1080">
	@* *Added Null supression *@
	@foreach (var buttonKey in SlideData.Buttons!.Keys.ToList())
	{
		if (GameState.CheckVisibility($"{SlideId}.{buttonKey}")) {

			var ButtonElement = SlideData.Buttons[buttonKey];
			// Declare here as it's used in several cases
			// points is null if button-type is preset so if it's a preset, 
			// make it empty list so that it hasn't to be nullable => no null warnings
			var PointsList = ButtonElement.Type != "preset" ? ButtonElement.Points.Split(',') : [];

			switch (ButtonElement.Type) {
				case "polygon":
					<polygon 
						id="@buttonKey"
						class="selectable-svg-element"
						fill=@fillColor
						points="@ButtonElement.Points" 
						@onclick="async () => { await HandleButtonClick(ButtonElement);}" 
					/>
					break;
				case "image":
					<image 
						id=@buttonKey
						x=@PointsList[0]
						y=@PointsList[1]
						width=@PointsList[2]
						height=@PointsList[3]
						href=@ButtonElement.Image
					/>
					break;
				case "rect":
					<rect
						id=@buttonKey
						class="selectable-svg-element"
						x=@PointsList[0]
						y=@PointsList[1]
						width=@PointsList[2]
						height=@PointsList[3]
						fill=@fillColor
						@onclick="async () => { await HandleButtonClick(ButtonElement);}"
					/>
					break;
				case "circle":
					<circle
						id=@buttonKey
						class="selectable-svg-element"
						cx=@PointsList[0]
						cy=@PointsList[1]
						r=@PointsList[2]
						fill=@fillColor
						@onclick="async () => { await HandleButtonClick(ButtonElement);}"
					/>
					break;
				case "preset":
					Dictionary<string, string> preset = [];
					switch (ButtonElement.Image) {
						case "left":
							preset = SlideService.PositionPresets["left"];
							break;
						case "right":
							preset = SlideService.PositionPresets["right"];
							break;
						case "top":
							preset = SlideService.PositionPresets["top"];
							break;
						case "bottom":
							preset = SlideService.PositionPresets["bottom"];
							break;
					}
					
					<rect
						id=@preset["id"]
						class="pos-preset"
						x=@preset["x"]
						y=@preset["y"]
						width=@preset["width"]
						height=@preset["height"]
						fill=@fillColor
						@onclick="async () => { await HandleButtonClick(ButtonElement);}"
					/>
					break;

			}
		}
	}
</svg>


@* JS Code *@

@*
<script> 
	// EXTERNAL Code!!!!
	(function() { // From https://github.com/veltman/loopify?tab=readme-ov-file

    function loopify(uri,cb) {

      var context = new (window.AudioContext || window.webkitAudioContext)(),
          request = new XMLHttpRequest();

      request.responseType = "arraybuffer";
      request.open("GET", uri, true);

      // XHR failed
      request.onerror = function() {
        cb(new Error("Couldn't load audio from " + uri));
      };

      // XHR complete
      request.onload = function() {
        context.decodeAudioData(request.response,success,function(err){
          // Audio was bad
          cb(new Error("Couldn't decode audio from " + uri));
        });
      };

      request.send();

      function success(buffer) {

        var source;

        function play() {

          // Stop if it's already playing
          stop();

          // Create a new source (can't replay an existing source)
          source = context.createBufferSource();
          source.connect(context.destination);

          // Set the buffer
          source.buffer = buffer;
          source.loop = true;

          // Play it
          source.start(0);

        }

        function stop() {

          // Stop and clear if it's playing
          if (source) {
            source.stop();
            source = null;
          }

        }

        cb(null,{
          play: play,
          stop: stop
        });

      }

    }

    loopify.version = "0.1";

    if (typeof define === "function" && define.amd) {
      define(function() { return loopify; });
    } else if (typeof module === "object" && module.exports) {
      module.exports = loopify;
    } else {
      this.loopify = loopify; 
    }

})();


	// Play the soundtrack audio via loopify
	const backgroundmusic_sourceTag = document.getElementById('bTrackSRC');
	loopify(backgroundmusic_sourceTag.src, function(err,loop) {
		// If something went wrong, `err` is supplied
		if (err) {
			return console.err(err);
		}
		// Play the loop, stop it with loop.stop()
		loop.play();
		});

</script>
*@



@code{ @* C# Code *@

	// https://imagemap.org/ 

}